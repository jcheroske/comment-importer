// tslint:disable
/**
 * Regulations.gov API
 * Public API for Regulations.gov
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as globalImportUrl from 'url';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError } from './base';
/**
 * the type of docket
 * @export
 * @enum {string}
 */
export var DocketType;
(function (DocketType) {
    DocketType["Rulemaking"] = "Rulemaking";
    DocketType["Nonrulemaking"] = "Nonrulemaking";
})(DocketType || (DocketType = {}));
/**
 * type of document
 * @export
 * @enum {string}
 */
export var DocumentType;
(function (DocumentType) {
    DocumentType["Notice"] = "Notice";
    DocumentType["Rule"] = "Rule";
    DocumentType["ProposedRule"] = "Proposed Rule";
    DocumentType["SupportingRelatedMaterial"] = "Supporting & Related Material";
    DocumentType["Other"] = "Other";
})(DocumentType || (DocumentType = {}));
/**
 * the submitter type
 * @export
 * @enum {string}
 */
export var SubmitterType;
(function (SubmitterType) {
    SubmitterType["Anonymous"] = "Anonymous";
    SubmitterType["Individual"] = "Individual";
    SubmitterType["Organization"] = "Organization";
})(SubmitterType || (SubmitterType = {}));
/**
 * CommentSubmissionUtilitiesApi - axios parameter creator
 * @export
 */
export const CommentSubmissionUtilitiesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This endpoint returns list of categories
         * @summary Returns a list of categories
         * @param {string} filterAcronym \&#39;Filters results for the agency acronym specified in the value. Example: \&#39;\&#39;EPA\&#39;\&#39;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agencyCategoriesGet: async (filterAcronym, options = {}) => {
            // verify required parameter 'filterAcronym' is not null or undefined
            if (filterAcronym === null || filterAcronym === undefined) {
                throw new RequiredError('filterAcronym', 'Required parameter filterAcronym was null or undefined when calling agencyCategoriesGet.');
            }
            const localVarPath = `/agency-categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey('X-Api-Key')
                    : await configuration.apiKey;
                localVarHeaderParameter['X-Api-Key'] = localVarApiKeyValue;
            }
            if (filterAcronym !== undefined) {
                localVarQueryParameter['filter[acronym]'] = filterAcronym;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a pre-signed URL to upload a file to the S3 bucket
         * @summary Creates a presigned url to upload file
         * @param {InlineObject1} inlineObject1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadUrlsPost: async (inlineObject1, options = {}) => {
            // verify required parameter 'inlineObject1' is not null or undefined
            if (inlineObject1 === null || inlineObject1 === undefined) {
                throw new RequiredError('inlineObject1', 'Required parameter inlineObject1 was null or undefined when calling fileUploadUrlsPost.');
            }
            const localVarPath = `/file-upload-urls`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey('X-Api-Key')
                    : await configuration.apiKey;
                localVarHeaderParameter['X-Api-Key'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = typeof inlineObject1 !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(inlineObject1 !== undefined ? inlineObject1 : {})
                : inlineObject1 || '';
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Creates the unique submission key
         * @param {InlineObject} [inlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmitterKey: async (inlineObject, options = {}) => {
            const localVarPath = `/submission-keys`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey('X-Api-Key')
                    : await configuration.apiKey;
                localVarHeaderParameter['X-Api-Key'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = typeof inlineObject !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(inlineObject !== undefined ? inlineObject : {})
                : inlineObject || '';
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CommentSubmissionUtilitiesApi - functional programming interface
 * @export
 */
export const CommentSubmissionUtilitiesApiFp = function (configuration) {
    return {
        /**
         * This endpoint returns list of categories
         * @summary Returns a list of categories
         * @param {string} filterAcronym \&#39;Filters results for the agency acronym specified in the value. Example: \&#39;\&#39;EPA\&#39;\&#39;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agencyCategoriesGet(filterAcronym, options) {
            const localVarAxiosArgs = await CommentSubmissionUtilitiesApiAxiosParamCreator(configuration).agencyCategoriesGet(filterAcronym, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a pre-signed URL to upload a file to the S3 bucket
         * @summary Creates a presigned url to upload file
         * @param {InlineObject1} inlineObject1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileUploadUrlsPost(inlineObject1, options) {
            const localVarAxiosArgs = await CommentSubmissionUtilitiesApiAxiosParamCreator(configuration).fileUploadUrlsPost(inlineObject1, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Creates the unique submission key
         * @param {InlineObject} [inlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubmitterKey(inlineObject, options) {
            const localVarAxiosArgs = await CommentSubmissionUtilitiesApiAxiosParamCreator(configuration).getSubmitterKey(inlineObject, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * CommentSubmissionUtilitiesApi - factory interface
 * @export
 */
export const CommentSubmissionUtilitiesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * This endpoint returns list of categories
         * @summary Returns a list of categories
         * @param {string} filterAcronym \&#39;Filters results for the agency acronym specified in the value. Example: \&#39;\&#39;EPA\&#39;\&#39;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agencyCategoriesGet(filterAcronym, options) {
            return CommentSubmissionUtilitiesApiFp(configuration)
                .agencyCategoriesGet(filterAcronym, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Returns a pre-signed URL to upload a file to the S3 bucket
         * @summary Creates a presigned url to upload file
         * @param {InlineObject1} inlineObject1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadUrlsPost(inlineObject1, options) {
            return CommentSubmissionUtilitiesApiFp(configuration)
                .fileUploadUrlsPost(inlineObject1, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates the unique submission key
         * @param {InlineObject} [inlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmitterKey(inlineObject, options) {
            return CommentSubmissionUtilitiesApiFp(configuration)
                .getSubmitterKey(inlineObject, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * CommentSubmissionUtilitiesApi - object-oriented interface
 * @export
 * @class CommentSubmissionUtilitiesApi
 * @extends {BaseAPI}
 */
export class CommentSubmissionUtilitiesApi extends BaseAPI {
    /**
     * This endpoint returns list of categories
     * @summary Returns a list of categories
     * @param {string} filterAcronym \&#39;Filters results for the agency acronym specified in the value. Example: \&#39;\&#39;EPA\&#39;\&#39;\&#39;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentSubmissionUtilitiesApi
     */
    agencyCategoriesGet(filterAcronym, options) {
        return CommentSubmissionUtilitiesApiFp(this.configuration)
            .agencyCategoriesGet(filterAcronym, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a pre-signed URL to upload a file to the S3 bucket
     * @summary Creates a presigned url to upload file
     * @param {InlineObject1} inlineObject1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentSubmissionUtilitiesApi
     */
    fileUploadUrlsPost(inlineObject1, options) {
        return CommentSubmissionUtilitiesApiFp(this.configuration)
            .fileUploadUrlsPost(inlineObject1, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates the unique submission key
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentSubmissionUtilitiesApi
     */
    getSubmitterKey(inlineObject, options) {
        return CommentSubmissionUtilitiesApiFp(this.configuration)
            .getSubmitterKey(inlineObject, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
/**
 * CommentsApi - axios parameter creator
 * @export
 */
export const CommentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Gets the detailed information of a specific comment with the passed commentId.
         * @summary Get detailed information for specified commentId
         * @param {string} commentId ID of comment to return
         * @param {string} [include] resources to include
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCommentIdGet: async (commentId, include, options = {}) => {
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId', 'Required parameter commentId was null or undefined when calling commentsCommentIdGet.');
            }
            const localVarPath = `/comments/{commentId}`.replace(`{${'commentId'}}`, encodeURIComponent(String(commentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey('X-Api-Key')
                    : await configuration.apiKey;
                localVarHeaderParameter['X-Api-Key'] = localVarApiKeyValue;
            }
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns list of comments
         * @summary List of comments
         * @param {string} [filterAgencyId] \&#39;Filters results for the agency acronym specified in the value. Example: \&#39;\&#39;EPA\&#39;\&#39;\&#39;
         * @param {string} [filterSearchTerm] Filters results on the given term.
         * @param {string} [filterPostedDate] Filters results relative to the posted date.  The value must be formatted as &#x60;yyyy-MM-dd&#x60;.&lt;br/&gt;&lt;br/&gt; Omission of a parameter modifier will match results to the exact date provided, otherwise, one of the parameter modifiers below may be used. &lt;br/&gt; &#x60;ge&#x60; - greater than or equal &lt;br/&gt; &#x60;le&#x60; - less than or equal
         * @param {string} [filterCommentOnId] Filters results on the supplied commentOnId
         * @param {string} [sort] Sorts the results on the field specified in the value.  The default behavior will sort the results in ascending order; to sort in descending order, prepend a minus sign to the value. &lt;br/&gt;&lt;br/&gt; The only supported value is &#x60;postedDate&#x60;.
         * @param {number} [pageNumber] Specifies the number for the page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 1 and 20.
         * @param {number} [pageSize] Specifies the size per page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 5 and 250.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGet: async (filterAgencyId, filterSearchTerm, filterPostedDate, filterCommentOnId, sort, pageNumber, pageSize, options = {}) => {
            const localVarPath = `/comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey('X-Api-Key')
                    : await configuration.apiKey;
                localVarHeaderParameter['X-Api-Key'] = localVarApiKeyValue;
            }
            if (filterAgencyId !== undefined) {
                localVarQueryParameter['filter[agencyId]'] = filterAgencyId;
            }
            if (filterSearchTerm !== undefined) {
                localVarQueryParameter['filter[searchTerm]'] = filterSearchTerm;
            }
            if (filterPostedDate !== undefined) {
                localVarQueryParameter['filter[postedDate]'] =
                    filterPostedDate instanceof Date
                        ? filterPostedDate.toISOString().substr(0, 10)
                        : filterPostedDate;
            }
            if (filterCommentOnId !== undefined) {
                localVarQueryParameter['filter[commentOnId]'] = filterCommentOnId;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['page[number]'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page[size]'] = pageSize;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Creates a new comment.
         * @param {JSONResourcePostRequestObject} jSONResourcePostRequestObject A JSON object containing comment information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsPost: async (jSONResourcePostRequestObject, options = {}) => {
            // verify required parameter 'jSONResourcePostRequestObject' is not null or undefined
            if (jSONResourcePostRequestObject === null || jSONResourcePostRequestObject === undefined) {
                throw new RequiredError('jSONResourcePostRequestObject', 'Required parameter jSONResourcePostRequestObject was null or undefined when calling commentsPost.');
            }
            const localVarPath = `/comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey('X-Api-Key')
                    : await configuration.apiKey;
                localVarHeaderParameter['X-Api-Key'] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = typeof jSONResourcePostRequestObject !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jSONResourcePostRequestObject !== undefined ? jSONResourcePostRequestObject : {})
                : jSONResourcePostRequestObject || '';
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CommentsApi - functional programming interface
 * @export
 */
export const CommentsApiFp = function (configuration) {
    return {
        /**
         * Gets the detailed information of a specific comment with the passed commentId.
         * @summary Get detailed information for specified commentId
         * @param {string} commentId ID of comment to return
         * @param {string} [include] resources to include
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsCommentIdGet(commentId, include, options) {
            const localVarAxiosArgs = await CommentsApiAxiosParamCreator(configuration).commentsCommentIdGet(commentId, include, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns list of comments
         * @summary List of comments
         * @param {string} [filterAgencyId] \&#39;Filters results for the agency acronym specified in the value. Example: \&#39;\&#39;EPA\&#39;\&#39;\&#39;
         * @param {string} [filterSearchTerm] Filters results on the given term.
         * @param {string} [filterPostedDate] Filters results relative to the posted date.  The value must be formatted as &#x60;yyyy-MM-dd&#x60;.&lt;br/&gt;&lt;br/&gt; Omission of a parameter modifier will match results to the exact date provided, otherwise, one of the parameter modifiers below may be used. &lt;br/&gt; &#x60;ge&#x60; - greater than or equal &lt;br/&gt; &#x60;le&#x60; - less than or equal
         * @param {string} [filterCommentOnId] Filters results on the supplied commentOnId
         * @param {string} [sort] Sorts the results on the field specified in the value.  The default behavior will sort the results in ascending order; to sort in descending order, prepend a minus sign to the value. &lt;br/&gt;&lt;br/&gt; The only supported value is &#x60;postedDate&#x60;.
         * @param {number} [pageNumber] Specifies the number for the page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 1 and 20.
         * @param {number} [pageSize] Specifies the size per page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 5 and 250.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsGet(filterAgencyId, filterSearchTerm, filterPostedDate, filterCommentOnId, sort, pageNumber, pageSize, options) {
            const localVarAxiosArgs = await CommentsApiAxiosParamCreator(configuration).commentsGet(filterAgencyId, filterSearchTerm, filterPostedDate, filterCommentOnId, sort, pageNumber, pageSize, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Creates a new comment.
         * @param {JSONResourcePostRequestObject} jSONResourcePostRequestObject A JSON object containing comment information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsPost(jSONResourcePostRequestObject, options) {
            const localVarAxiosArgs = await CommentsApiAxiosParamCreator(configuration).commentsPost(jSONResourcePostRequestObject, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * CommentsApi - factory interface
 * @export
 */
export const CommentsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Gets the detailed information of a specific comment with the passed commentId.
         * @summary Get detailed information for specified commentId
         * @param {string} commentId ID of comment to return
         * @param {string} [include] resources to include
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCommentIdGet(commentId, include, options) {
            return CommentsApiFp(configuration)
                .commentsCommentIdGet(commentId, include, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns list of comments
         * @summary List of comments
         * @param {string} [filterAgencyId] \&#39;Filters results for the agency acronym specified in the value. Example: \&#39;\&#39;EPA\&#39;\&#39;\&#39;
         * @param {string} [filterSearchTerm] Filters results on the given term.
         * @param {string} [filterPostedDate] Filters results relative to the posted date.  The value must be formatted as &#x60;yyyy-MM-dd&#x60;.&lt;br/&gt;&lt;br/&gt; Omission of a parameter modifier will match results to the exact date provided, otherwise, one of the parameter modifiers below may be used. &lt;br/&gt; &#x60;ge&#x60; - greater than or equal &lt;br/&gt; &#x60;le&#x60; - less than or equal
         * @param {string} [filterCommentOnId] Filters results on the supplied commentOnId
         * @param {string} [sort] Sorts the results on the field specified in the value.  The default behavior will sort the results in ascending order; to sort in descending order, prepend a minus sign to the value. &lt;br/&gt;&lt;br/&gt; The only supported value is &#x60;postedDate&#x60;.
         * @param {number} [pageNumber] Specifies the number for the page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 1 and 20.
         * @param {number} [pageSize] Specifies the size per page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 5 and 250.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsGet(filterAgencyId, filterSearchTerm, filterPostedDate, filterCommentOnId, sort, pageNumber, pageSize, options) {
            return CommentsApiFp(configuration)
                .commentsGet(filterAgencyId, filterSearchTerm, filterPostedDate, filterCommentOnId, sort, pageNumber, pageSize, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a new comment.
         * @param {JSONResourcePostRequestObject} jSONResourcePostRequestObject A JSON object containing comment information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsPost(jSONResourcePostRequestObject, options) {
            return CommentsApiFp(configuration)
                .commentsPost(jSONResourcePostRequestObject, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * CommentsApi - object-oriented interface
 * @export
 * @class CommentsApi
 * @extends {BaseAPI}
 */
export class CommentsApi extends BaseAPI {
    /**
     * Gets the detailed information of a specific comment with the passed commentId.
     * @summary Get detailed information for specified commentId
     * @param {string} commentId ID of comment to return
     * @param {string} [include] resources to include
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    commentsCommentIdGet(commentId, include, options) {
        return CommentsApiFp(this.configuration)
            .commentsCommentIdGet(commentId, include, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns list of comments
     * @summary List of comments
     * @param {string} [filterAgencyId] \&#39;Filters results for the agency acronym specified in the value. Example: \&#39;\&#39;EPA\&#39;\&#39;\&#39;
     * @param {string} [filterSearchTerm] Filters results on the given term.
     * @param {string} [filterPostedDate] Filters results relative to the posted date.  The value must be formatted as &#x60;yyyy-MM-dd&#x60;.&lt;br/&gt;&lt;br/&gt; Omission of a parameter modifier will match results to the exact date provided, otherwise, one of the parameter modifiers below may be used. &lt;br/&gt; &#x60;ge&#x60; - greater than or equal &lt;br/&gt; &#x60;le&#x60; - less than or equal
     * @param {string} [filterCommentOnId] Filters results on the supplied commentOnId
     * @param {string} [sort] Sorts the results on the field specified in the value.  The default behavior will sort the results in ascending order; to sort in descending order, prepend a minus sign to the value. &lt;br/&gt;&lt;br/&gt; The only supported value is &#x60;postedDate&#x60;.
     * @param {number} [pageNumber] Specifies the number for the page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 1 and 20.
     * @param {number} [pageSize] Specifies the size per page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 5 and 250.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    commentsGet(filterAgencyId, filterSearchTerm, filterPostedDate, filterCommentOnId, sort, pageNumber, pageSize, options) {
        return CommentsApiFp(this.configuration)
            .commentsGet(filterAgencyId, filterSearchTerm, filterPostedDate, filterCommentOnId, sort, pageNumber, pageSize, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates a new comment.
     * @param {JSONResourcePostRequestObject} jSONResourcePostRequestObject A JSON object containing comment information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    commentsPost(jSONResourcePostRequestObject, options) {
        return CommentsApiFp(this.configuration)
            .commentsPost(jSONResourcePostRequestObject, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
/**
 * DocketsApi - axios parameter creator
 * @export
 */
export const DocketsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Gets the detailed information of a specific docket with the passed docketId.
         * @summary Get detailed information for specified docketId
         * @param {string} docketId ID of docket to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        docketsDocketIdGet: async (docketId, options = {}) => {
            // verify required parameter 'docketId' is not null or undefined
            if (docketId === null || docketId === undefined) {
                throw new RequiredError('docketId', 'Required parameter docketId was null or undefined when calling docketsDocketIdGet.');
            }
            const localVarPath = `/dockets/{docketId}`.replace(`{${'docketId'}}`, encodeURIComponent(String(docketId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey('X-Api-Key')
                    : await configuration.apiKey;
                localVarHeaderParameter['X-Api-Key'] = localVarApiKeyValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns list of dockets
         * @summary List of dockets
         * @param {string} [filterAgencyId] \&#39;Filters results for the agency acronym specified in the value. Example: \&#39;\&#39;EPA\&#39;\&#39;\&#39;
         * @param {string} [filterSearchTerm] Filters results on the given term.
         * @param {DocketType} [filterDocketType] Filters results on the specified docket type.
         * @param {string} [sort] Sorts the results on the field specified in the value.  The default behavior will sort the results in ascending order; to sort in descending order, prepend a minus sign to the value. &lt;br/&gt;&lt;br/&gt; The only supported value is &#x60;title&#x60;.
         * @param {number} [pageNumber] Specifies the number for the page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 1 and 20.
         * @param {number} [pageSize] Specifies the size per page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 5 and 250.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        docketsGet: async (filterAgencyId, filterSearchTerm, filterDocketType, sort, pageNumber, pageSize, options = {}) => {
            const localVarPath = `/dockets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey('X-Api-Key')
                    : await configuration.apiKey;
                localVarHeaderParameter['X-Api-Key'] = localVarApiKeyValue;
            }
            if (filterAgencyId !== undefined) {
                localVarQueryParameter['filter[agencyId]'] = filterAgencyId;
            }
            if (filterSearchTerm !== undefined) {
                localVarQueryParameter['filter[searchTerm]'] = filterSearchTerm;
            }
            if (filterDocketType !== undefined) {
                localVarQueryParameter['filter[docketType]'] = filterDocketType;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['page[number]'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page[size]'] = pageSize;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DocketsApi - functional programming interface
 * @export
 */
export const DocketsApiFp = function (configuration) {
    return {
        /**
         * Gets the detailed information of a specific docket with the passed docketId.
         * @summary Get detailed information for specified docketId
         * @param {string} docketId ID of docket to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async docketsDocketIdGet(docketId, options) {
            const localVarAxiosArgs = await DocketsApiAxiosParamCreator(configuration).docketsDocketIdGet(docketId, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns list of dockets
         * @summary List of dockets
         * @param {string} [filterAgencyId] \&#39;Filters results for the agency acronym specified in the value. Example: \&#39;\&#39;EPA\&#39;\&#39;\&#39;
         * @param {string} [filterSearchTerm] Filters results on the given term.
         * @param {DocketType} [filterDocketType] Filters results on the specified docket type.
         * @param {string} [sort] Sorts the results on the field specified in the value.  The default behavior will sort the results in ascending order; to sort in descending order, prepend a minus sign to the value. &lt;br/&gt;&lt;br/&gt; The only supported value is &#x60;title&#x60;.
         * @param {number} [pageNumber] Specifies the number for the page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 1 and 20.
         * @param {number} [pageSize] Specifies the size per page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 5 and 250.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async docketsGet(filterAgencyId, filterSearchTerm, filterDocketType, sort, pageNumber, pageSize, options) {
            const localVarAxiosArgs = await DocketsApiAxiosParamCreator(configuration).docketsGet(filterAgencyId, filterSearchTerm, filterDocketType, sort, pageNumber, pageSize, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * DocketsApi - factory interface
 * @export
 */
export const DocketsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Gets the detailed information of a specific docket with the passed docketId.
         * @summary Get detailed information for specified docketId
         * @param {string} docketId ID of docket to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        docketsDocketIdGet(docketId, options) {
            return DocketsApiFp(configuration)
                .docketsDocketIdGet(docketId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns list of dockets
         * @summary List of dockets
         * @param {string} [filterAgencyId] \&#39;Filters results for the agency acronym specified in the value. Example: \&#39;\&#39;EPA\&#39;\&#39;\&#39;
         * @param {string} [filterSearchTerm] Filters results on the given term.
         * @param {DocketType} [filterDocketType] Filters results on the specified docket type.
         * @param {string} [sort] Sorts the results on the field specified in the value.  The default behavior will sort the results in ascending order; to sort in descending order, prepend a minus sign to the value. &lt;br/&gt;&lt;br/&gt; The only supported value is &#x60;title&#x60;.
         * @param {number} [pageNumber] Specifies the number for the page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 1 and 20.
         * @param {number} [pageSize] Specifies the size per page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 5 and 250.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        docketsGet(filterAgencyId, filterSearchTerm, filterDocketType, sort, pageNumber, pageSize, options) {
            return DocketsApiFp(configuration)
                .docketsGet(filterAgencyId, filterSearchTerm, filterDocketType, sort, pageNumber, pageSize, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * DocketsApi - object-oriented interface
 * @export
 * @class DocketsApi
 * @extends {BaseAPI}
 */
export class DocketsApi extends BaseAPI {
    /**
     * Gets the detailed information of a specific docket with the passed docketId.
     * @summary Get detailed information for specified docketId
     * @param {string} docketId ID of docket to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocketsApi
     */
    docketsDocketIdGet(docketId, options) {
        return DocketsApiFp(this.configuration)
            .docketsDocketIdGet(docketId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns list of dockets
     * @summary List of dockets
     * @param {string} [filterAgencyId] \&#39;Filters results for the agency acronym specified in the value. Example: \&#39;\&#39;EPA\&#39;\&#39;\&#39;
     * @param {string} [filterSearchTerm] Filters results on the given term.
     * @param {DocketType} [filterDocketType] Filters results on the specified docket type.
     * @param {string} [sort] Sorts the results on the field specified in the value.  The default behavior will sort the results in ascending order; to sort in descending order, prepend a minus sign to the value. &lt;br/&gt;&lt;br/&gt; The only supported value is &#x60;title&#x60;.
     * @param {number} [pageNumber] Specifies the number for the page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 1 and 20.
     * @param {number} [pageSize] Specifies the size per page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 5 and 250.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocketsApi
     */
    docketsGet(filterAgencyId, filterSearchTerm, filterDocketType, sort, pageNumber, pageSize, options) {
        return DocketsApiFp(this.configuration)
            .docketsGet(filterAgencyId, filterSearchTerm, filterDocketType, sort, pageNumber, pageSize, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
/**
 * DocumentsApi - axios parameter creator
 * @export
 */
export const DocumentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Gets the detailed information of a specific document with the passed documentId.
         * @summary Get detailed information for specified documentId
         * @param {string} documentId ID of document to return
         * @param {string} [include] resources to include
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsDocumentIdGet: async (documentId, include, options = {}) => {
            // verify required parameter 'documentId' is not null or undefined
            if (documentId === null || documentId === undefined) {
                throw new RequiredError('documentId', 'Required parameter documentId was null or undefined when calling documentsDocumentIdGet.');
            }
            const localVarPath = `/documents/{documentId}`.replace(`{${'documentId'}}`, encodeURIComponent(String(documentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey('X-Api-Key')
                    : await configuration.apiKey;
                localVarHeaderParameter['X-Api-Key'] = localVarApiKeyValue;
            }
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns list of documents
         * @summary List of documents
         * @param {string} [filterAgencyId] \&#39;Filters results for the agency acronym specified in the value. Example: \&#39;\&#39;EPA\&#39;\&#39;\&#39;
         * @param {string} [filterCommentEndDate] Filters results relative to the comment end date.  The value must be formatted as &#x60;yyyy-MM-dd&#x60;.&lt;br/&gt;&lt;br/&gt; Omission of a parameter modifier will match results to the exact date provided, otherwise, one of the parameter modifiers below may be used. &lt;br/&gt; &#x60;ge&#x60; - greater than or equal &lt;br/&gt; &#x60;le&#x60; - less than or equal
         * @param {string} [filterDocketId] Filters results on the specified docket ID.
         * @param {DocumentType} [filterDocumentType] Filters results on the specified document type.
         * @param {string} [filterFrDocNum] Filters results on the specified frDocNum.
         * @param {string} [filterSearchTerm] Filters results on the given term.
         * @param {string} [filterPostedDate] Filters results relative to the posted date.  The value must be formatted as &#x60;yyyy-MM-dd&#x60;.&lt;br/&gt;&lt;br/&gt; Omission of a parameter modifier will match results to the exact date provided, otherwise, one of the parameter modifiers below may be used. &lt;br/&gt; &#x60;ge&#x60; - greater than or equal &lt;br/&gt; &#x60;le&#x60; - less than or equal
         * @param {string} [filterSubtype] Filters results on the supplied document subtype
         * @param {boolean} [filterWithinCommentPeriod] Filters results for documents that are open for comment by setting the value to &#x60;true&#x60;. &lt;br/&gt;&lt;br/&gt; _&#x60;False&#x60; is not an acceptable value for this parameter, hence it should be removed when not being used._
         * @param {string} [sort] Sorts the results on the field specified in the value.  The default behavior will sort the results in ascending order; to sort in descending order, prepend a minus sign to the value. &lt;br/&gt;&lt;br/&gt; Supported values are &#x60;commentEndDate&#x60;, &#x60;postedDate&#x60;, and &#x60;title&#x60;.
         * @param {number} [pageNumber] Specifies the number for the page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 1 and 20.
         * @param {number} [pageSize] Specifies the size per page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 5 and 250.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsGet: async (filterAgencyId, filterCommentEndDate, filterDocketId, filterDocumentType, filterFrDocNum, filterSearchTerm, filterPostedDate, filterSubtype, filterWithinCommentPeriod, sort, pageNumber, pageSize, options = {}) => {
            const localVarPath = `/documents`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey('X-Api-Key')
                    : await configuration.apiKey;
                localVarHeaderParameter['X-Api-Key'] = localVarApiKeyValue;
            }
            if (filterAgencyId !== undefined) {
                localVarQueryParameter['filter[agencyId]'] = filterAgencyId;
            }
            if (filterCommentEndDate !== undefined) {
                localVarQueryParameter['filter[commentEndDate]'] =
                    filterCommentEndDate instanceof Date
                        ? filterCommentEndDate.toISOString().substr(0, 10)
                        : filterCommentEndDate;
            }
            if (filterDocketId !== undefined) {
                localVarQueryParameter['filter[docketId]'] = filterDocketId;
            }
            if (filterDocumentType !== undefined) {
                localVarQueryParameter['filter[documentType]'] = filterDocumentType;
            }
            if (filterFrDocNum !== undefined) {
                localVarQueryParameter['filter[frDocNum]'] = filterFrDocNum;
            }
            if (filterSearchTerm !== undefined) {
                localVarQueryParameter['filter[searchTerm]'] = filterSearchTerm;
            }
            if (filterPostedDate !== undefined) {
                localVarQueryParameter['filter[postedDate]'] =
                    filterPostedDate instanceof Date
                        ? filterPostedDate.toISOString().substr(0, 10)
                        : filterPostedDate;
            }
            if (filterSubtype !== undefined) {
                localVarQueryParameter['filter[subtype]'] = filterSubtype;
            }
            if (filterWithinCommentPeriod !== undefined) {
                localVarQueryParameter['filter[withinCommentPeriod]'] = filterWithinCommentPeriod;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['page[number]'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page[size]'] = pageSize;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DocumentsApi - functional programming interface
 * @export
 */
export const DocumentsApiFp = function (configuration) {
    return {
        /**
         * Gets the detailed information of a specific document with the passed documentId.
         * @summary Get detailed information for specified documentId
         * @param {string} documentId ID of document to return
         * @param {string} [include] resources to include
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentsDocumentIdGet(documentId, include, options) {
            const localVarAxiosArgs = await DocumentsApiAxiosParamCreator(configuration).documentsDocumentIdGet(documentId, include, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns list of documents
         * @summary List of documents
         * @param {string} [filterAgencyId] \&#39;Filters results for the agency acronym specified in the value. Example: \&#39;\&#39;EPA\&#39;\&#39;\&#39;
         * @param {string} [filterCommentEndDate] Filters results relative to the comment end date.  The value must be formatted as &#x60;yyyy-MM-dd&#x60;.&lt;br/&gt;&lt;br/&gt; Omission of a parameter modifier will match results to the exact date provided, otherwise, one of the parameter modifiers below may be used. &lt;br/&gt; &#x60;ge&#x60; - greater than or equal &lt;br/&gt; &#x60;le&#x60; - less than or equal
         * @param {string} [filterDocketId] Filters results on the specified docket ID.
         * @param {DocumentType} [filterDocumentType] Filters results on the specified document type.
         * @param {string} [filterFrDocNum] Filters results on the specified frDocNum.
         * @param {string} [filterSearchTerm] Filters results on the given term.
         * @param {string} [filterPostedDate] Filters results relative to the posted date.  The value must be formatted as &#x60;yyyy-MM-dd&#x60;.&lt;br/&gt;&lt;br/&gt; Omission of a parameter modifier will match results to the exact date provided, otherwise, one of the parameter modifiers below may be used. &lt;br/&gt; &#x60;ge&#x60; - greater than or equal &lt;br/&gt; &#x60;le&#x60; - less than or equal
         * @param {string} [filterSubtype] Filters results on the supplied document subtype
         * @param {boolean} [filterWithinCommentPeriod] Filters results for documents that are open for comment by setting the value to &#x60;true&#x60;. &lt;br/&gt;&lt;br/&gt; _&#x60;False&#x60; is not an acceptable value for this parameter, hence it should be removed when not being used._
         * @param {string} [sort] Sorts the results on the field specified in the value.  The default behavior will sort the results in ascending order; to sort in descending order, prepend a minus sign to the value. &lt;br/&gt;&lt;br/&gt; Supported values are &#x60;commentEndDate&#x60;, &#x60;postedDate&#x60;, and &#x60;title&#x60;.
         * @param {number} [pageNumber] Specifies the number for the page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 1 and 20.
         * @param {number} [pageSize] Specifies the size per page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 5 and 250.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async documentsGet(filterAgencyId, filterCommentEndDate, filterDocketId, filterDocumentType, filterFrDocNum, filterSearchTerm, filterPostedDate, filterSubtype, filterWithinCommentPeriod, sort, pageNumber, pageSize, options) {
            const localVarAxiosArgs = await DocumentsApiAxiosParamCreator(configuration).documentsGet(filterAgencyId, filterCommentEndDate, filterDocketId, filterDocumentType, filterFrDocNum, filterSearchTerm, filterPostedDate, filterSubtype, filterWithinCommentPeriod, sort, pageNumber, pageSize, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * DocumentsApi - factory interface
 * @export
 */
export const DocumentsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Gets the detailed information of a specific document with the passed documentId.
         * @summary Get detailed information for specified documentId
         * @param {string} documentId ID of document to return
         * @param {string} [include] resources to include
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsDocumentIdGet(documentId, include, options) {
            return DocumentsApiFp(configuration)
                .documentsDocumentIdGet(documentId, include, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns list of documents
         * @summary List of documents
         * @param {string} [filterAgencyId] \&#39;Filters results for the agency acronym specified in the value. Example: \&#39;\&#39;EPA\&#39;\&#39;\&#39;
         * @param {string} [filterCommentEndDate] Filters results relative to the comment end date.  The value must be formatted as &#x60;yyyy-MM-dd&#x60;.&lt;br/&gt;&lt;br/&gt; Omission of a parameter modifier will match results to the exact date provided, otherwise, one of the parameter modifiers below may be used. &lt;br/&gt; &#x60;ge&#x60; - greater than or equal &lt;br/&gt; &#x60;le&#x60; - less than or equal
         * @param {string} [filterDocketId] Filters results on the specified docket ID.
         * @param {DocumentType} [filterDocumentType] Filters results on the specified document type.
         * @param {string} [filterFrDocNum] Filters results on the specified frDocNum.
         * @param {string} [filterSearchTerm] Filters results on the given term.
         * @param {string} [filterPostedDate] Filters results relative to the posted date.  The value must be formatted as &#x60;yyyy-MM-dd&#x60;.&lt;br/&gt;&lt;br/&gt; Omission of a parameter modifier will match results to the exact date provided, otherwise, one of the parameter modifiers below may be used. &lt;br/&gt; &#x60;ge&#x60; - greater than or equal &lt;br/&gt; &#x60;le&#x60; - less than or equal
         * @param {string} [filterSubtype] Filters results on the supplied document subtype
         * @param {boolean} [filterWithinCommentPeriod] Filters results for documents that are open for comment by setting the value to &#x60;true&#x60;. &lt;br/&gt;&lt;br/&gt; _&#x60;False&#x60; is not an acceptable value for this parameter, hence it should be removed when not being used._
         * @param {string} [sort] Sorts the results on the field specified in the value.  The default behavior will sort the results in ascending order; to sort in descending order, prepend a minus sign to the value. &lt;br/&gt;&lt;br/&gt; Supported values are &#x60;commentEndDate&#x60;, &#x60;postedDate&#x60;, and &#x60;title&#x60;.
         * @param {number} [pageNumber] Specifies the number for the page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 1 and 20.
         * @param {number} [pageSize] Specifies the size per page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 5 and 250.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentsGet(filterAgencyId, filterCommentEndDate, filterDocketId, filterDocumentType, filterFrDocNum, filterSearchTerm, filterPostedDate, filterSubtype, filterWithinCommentPeriod, sort, pageNumber, pageSize, options) {
            return DocumentsApiFp(configuration)
                .documentsGet(filterAgencyId, filterCommentEndDate, filterDocketId, filterDocumentType, filterFrDocNum, filterSearchTerm, filterPostedDate, filterSubtype, filterWithinCommentPeriod, sort, pageNumber, pageSize, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * DocumentsApi - object-oriented interface
 * @export
 * @class DocumentsApi
 * @extends {BaseAPI}
 */
export class DocumentsApi extends BaseAPI {
    /**
     * Gets the detailed information of a specific document with the passed documentId.
     * @summary Get detailed information for specified documentId
     * @param {string} documentId ID of document to return
     * @param {string} [include] resources to include
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    documentsDocumentIdGet(documentId, include, options) {
        return DocumentsApiFp(this.configuration)
            .documentsDocumentIdGet(documentId, include, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns list of documents
     * @summary List of documents
     * @param {string} [filterAgencyId] \&#39;Filters results for the agency acronym specified in the value. Example: \&#39;\&#39;EPA\&#39;\&#39;\&#39;
     * @param {string} [filterCommentEndDate] Filters results relative to the comment end date.  The value must be formatted as &#x60;yyyy-MM-dd&#x60;.&lt;br/&gt;&lt;br/&gt; Omission of a parameter modifier will match results to the exact date provided, otherwise, one of the parameter modifiers below may be used. &lt;br/&gt; &#x60;ge&#x60; - greater than or equal &lt;br/&gt; &#x60;le&#x60; - less than or equal
     * @param {string} [filterDocketId] Filters results on the specified docket ID.
     * @param {DocumentType} [filterDocumentType] Filters results on the specified document type.
     * @param {string} [filterFrDocNum] Filters results on the specified frDocNum.
     * @param {string} [filterSearchTerm] Filters results on the given term.
     * @param {string} [filterPostedDate] Filters results relative to the posted date.  The value must be formatted as &#x60;yyyy-MM-dd&#x60;.&lt;br/&gt;&lt;br/&gt; Omission of a parameter modifier will match results to the exact date provided, otherwise, one of the parameter modifiers below may be used. &lt;br/&gt; &#x60;ge&#x60; - greater than or equal &lt;br/&gt; &#x60;le&#x60; - less than or equal
     * @param {string} [filterSubtype] Filters results on the supplied document subtype
     * @param {boolean} [filterWithinCommentPeriod] Filters results for documents that are open for comment by setting the value to &#x60;true&#x60;. &lt;br/&gt;&lt;br/&gt; _&#x60;False&#x60; is not an acceptable value for this parameter, hence it should be removed when not being used._
     * @param {string} [sort] Sorts the results on the field specified in the value.  The default behavior will sort the results in ascending order; to sort in descending order, prepend a minus sign to the value. &lt;br/&gt;&lt;br/&gt; Supported values are &#x60;commentEndDate&#x60;, &#x60;postedDate&#x60;, and &#x60;title&#x60;.
     * @param {number} [pageNumber] Specifies the number for the page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 1 and 20.
     * @param {number} [pageSize] Specifies the size per page of results that will be returned from the query. &lt;br/&gt;&lt;br/&gt; Acceptable values are numerical between, and including, 5 and 250.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    documentsGet(filterAgencyId, filterCommentEndDate, filterDocketId, filterDocumentType, filterFrDocNum, filterSearchTerm, filterPostedDate, filterSubtype, filterWithinCommentPeriod, sort, pageNumber, pageSize, options) {
        return DocumentsApiFp(this.configuration)
            .documentsGet(filterAgencyId, filterCommentEndDate, filterDocketId, filterDocumentType, filterFrDocNum, filterSearchTerm, filterPostedDate, filterSubtype, filterWithinCommentPeriod, sort, pageNumber, pageSize, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=api.js.map